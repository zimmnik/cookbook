#start server
docker run -it --rm -p 8200:8200 docker.io/library/vault:1.13.3

#start client
docker run -it --rm --net host docker.io/library/vault:1.13.3 sh -c "apk add openssh && ash"

# set address
export VAULT_ADDR='http://0.0.0.0:8200'
#export VAULT_ADDR="https://dev-vault.example.com

# check server status
vault status

# auth
vault login -method=token
#vault login -method=ldap username=zorg
#vault read auth/ldap/config
#vault list auth/ldap/groups
#vault read -format=json auth/ldap/groups/in-gsu-vault_adminqq

# list enabled instances of engines
vault secrets list

# check authorization
vault policy list

---------------------------------------------------------------------------------------------------------------------------
# FYI https://developer.hashicorp.com/vault/docs/secrets/kv/kv-v2
# create dedicated instance of kv engine
vault secrets enable -version=2 -path=terra-kv-zorg -description="pilot, to be deleted" kv && vault secrets list

# update policy
vault policy read policy-devops > p.json

vim p.json
path "terra-kv-zorg/*" {
  capabilities = ["create", "read", "update", "patch", "delete", "list", "sudo"]
}
 
vault policy write policy-devops p.json

# create secret
vault kv put -mount=terra-kv-zorg terra-vsphere-main-api domain="rig.example.com" login="joe" password="blahblah"

# get record list
vault kv list terra-kv-zorg

# get whole record
vault kv get -mount=terra-kv-zorg terra-vsphere-main-api

# update custom value in secret
vault kv patch -mount=terra-kv-zorg terra-vsphere-main-api password="bugaga"

# get custom value in secret
vault kv get -mount=terra-kv-zorg -field=password terra-vsphere-main-api

# remove secret
vault kv metadata delete -mount=terra-kv-zorg terra-vsphere-main-api

# disable our instance of kv engine
vault secrets disable terra-kv-zorg

---------------------------------------------------------------------------------------------------------------------------
# DEBUG
vault audit enable file file_path=/var/log/vault_audit.log
vault audit list
vault audit disable file

---------------------------------------------------------------------------------------------------------------------------
# GETTING SECRETS VIA JWT TOKENS IN GITLAB CICD

# VAULT STAGE
#STEP 1 create kv-v2 variables

#STEP 2 create policy
vault policy list
cat << EOF > vault-policy-terra-ci-terraform-essentials.hcl
path "terra-kv-main/data/bind-dns-api" {
    capabilities = ["read"]
}
path "terra-kv-main/data/nexus-repo-tfstates" {
    capabilities = ["read"]
}
path "terra-kv-main/data/vsphere-api" {
    capabilities = ["read"]
}
EOF
vault policy write terra-ci-terraform-essentials vault-policy-terra-ci-terraform-essentials.hcl && :h
vault policy read terra-ci-terraform-essentials

#STEP 3 enable jwt se instance
# FYI https://archives.docs.gitlab.com/15.11/ee/ci/examples/authenticating-with-hashicorp-vault/
vault auth list
vault auth enable -path="jwt" -description="jwt auth from gitlab.example.com" jwt && vault auth list
vault write auth/jwt/config jwks_url="https://gitlab.example.com/-/jwks" bound_issuer="gitlab.example.com" && vault read /auth/jwt/config

#STEP 4 create jwt role
vault list auth/jwt/role/
cat << EOF > vault-jwt-role-k8s-dynamic.json
{
  "role_type": "jwt",
  "policies": [
    "terra-ci-terraform-essentials"
  ],
  "token_explicit_max_ttl": 60,
  "user_claim": "user_email",
  "bound_claims": {
    "project_id": "2941"
  }
}
EOF
vault write auth/jwt/role/k8s-dynamic @vault-jwt-role-k8s-dynamic.json && vault list auth/jwt/role/
vault read -format=json auth/jwt/role/k8s-dynamic | less

# GITLAB STAGE
.gitlab-ci.yml
...
.get-vault-secrets:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://dev-vault.example.com
  secrets:
    VSPHERE_SERVER:
      vault: vsphere-api/domain@terra-kv-main
      file: false
  variables:
    VAULT_SERVER_URL: "https://dev-vault.example.com"
    VAULT_AUTH_PATH: "jwt"
    VAULT_AUTH_ROLE:  "k8s-dynamic"
...   
a:debug:
  stage: adhoc
  extends: .get-vault-secrets
  needs: []
  script:
    - echo "${VSPHERE_SERVER^^}"

---------------------------------------------------------------------------------------------------------------------------
# SSH AUTH

# 1 VAULT STAGE
# create instance of ssh secret engine
vault secrets enable -path=terra-ssh-main -description="ssh auth for virtual machines" ssh
# generate SSL CA
vault write terra-ssh-main/config/ca generate_signing_key=true

# create management policy for vault admins
cat << EOF > terra-ssh-main-admin.hcl
path "terra-ssh-main/*" {
  capabilities = ["create", "read", "update", "patch", "delete", "list", "sudo"]
}
EOF
vault policy write terra-ssh-main-admin terra-ssh-main-admin.hcl
#apply policy for vault admins. It depends for auth methods

# create ssh admin role for approved vault users
cat << EOF > vault-ssh-role-admin.json 
{
  "key_type": "ca",
  "allow_user_certificates": true,
  "default_user": "admin",
  "allowed_users": "admin",
  "allowed_extensions": "permit-pty,permit-port-forwarding",
  "default_extensions": {
    "permit-pty": ""
  },
  "token_explicit_max_ttl": "12h"
}
EOF
vault write terra-ssh-main/roles/admin @vault-ssh-role-admin.json

# update ansible policy
cat << EOF > terra-ci-ansible-essentials.hcl
path "terra-kv-main/data/ansible-roles" {
    capabilities = ["read"]
}
path "terra-kv-main/data/certificates" {
    capabilities = ["read"]
}
path "terra-ssh-main/roles/*" {
    capabilities = ["list"]
}
path "terra-ssh-main/sign/admin" {
    capabilities = ["create","update"]
}
EOF
vault policy write terra-ci-ansible-essentials terra-ci-ansible-essentials.hcl

# 2 SSHD STAGE
sudo curl -L https://dev-vault.example.com/v1/terra-ssh-main/public_key -o /etc/ssh/trusted-user-ca-keys.pem
echo "TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem" | sudo tee -a /etc/ssh/sshd_config 
sudo systemctl restart sshd

# 3 USER SSH LOGIN STAGE
export VAULT_ADDR="https://dev-vault.example.com" && vault status
vault login -method=ldap username=zorg

ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa_demo
eval $(ssh-agent -s)
ssh-add ~/.ssh/id_rsa_demo && ssh-add -L

vault write -field=signed_key terra-ssh-main/sign/admin public_key=@$HOME/.ssh/id_rsa_demo.pub > ~/.ssh/signed-cert.pub && ssh-keygen -Lf ~/.ssh/signed-cert.pub
ssh -i ~/.ssh/signed-cert.pub -i ~/.ssh/id_rsa_demo admin@k8s-storage-1-dev-198.terra.example.com

# 4 CI SSH LOGIN STAGE
-------------------------------------------------------------------------------
# WORKAROUND gitlab https://gitlab.com/gitlab-org/gitlab-runner/-/issues/30960
# VAULT SUBSTAGE
vault auth enable -path="terra-jwt-gitlab-obsolete-iss" -description="workaround from https://gitlab.com/gitlab-org/gitlab-runner/-/issues/30960" jwt && vault auth list
vault write auth/terra-jwt-gitlab-obsolete-iss/config jwks_url="https://gitlab.example.com/-/jwks" bound_issuer="https://gitlab.example.com" && vault read /auth/terra-jwt-gitlab-obsolete-iss/config
vault list auth/terra-jwt-gitlab-obsolete-iss/role
cat << EOF > vault-jwt-role-k8s-dynamic.json
{
  "role_type": "jwt",
  "policies": [
    "terra-ci-ansible-essentials"
  ],
  "token_explicit_max_ttl": 60,
  "user_claim": "user_email",
  "bound_claims": {
    "project_id": "2941"
  }
}
EOF
vault write auth/terra-jwt-gitlab-obsolete-iss/role/k8s-dynamic @vault-jwt-role-k8s-dynamic.json
vault list auth/terra-jwt-gitlab-obsolete-iss/role
